AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Fargate Service with ALB, Auto Scaling, and S3 for image app

Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet1:
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2:
    Type: AWS::EC2::Subnet::Id
  ECRImage:
    Type: String
    Description: Full URI of the Docker image in ECR.

Resources:
# S3 Bucket
  ImageAppS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: shutterbox-image-app-s3-bucket
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, PUT, POST]
            AllowedOrigins: ["*"]
            MaxAge: 3000

# ECS Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

# Elastic Container Service (ECS) Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: image-app-cluster

# Application Load Balancer Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to ALB
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

# ECS Security Group
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ALB to ECS
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8082
          ToPort: 8082
          SourceSecurityGroupId: !Ref ALBSecurityGroup

# Application Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: image-app-alb
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      SecurityGroups: [!Ref ALBSecurityGroup]

# Load Balancer Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ia-tg
      Port: 8082
      Protocol: HTTP
      VpcId: !Ref VPCId
      TargetType: ip
      HealthCheckPath: /actuator/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: 200-299
  
  # For blue/green codedeploy
  TargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: ia-tg2
      Port: 8082
      Protocol: HTTP
      VpcId: !Ref VPCId
      TargetType: ip
      HealthCheckPath: /actuator/health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: 200-299

# Load Balancer Listener
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

# ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: image-app-task
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: image-app
          Image: !Ref ECRImage
          PortMappings:
            - ContainerPort: 8082
          Environment:
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"
            - Name: BUCKET_NAME
              Value: !Ref ImageAppS3Bucket
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/image-app
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: ecs

# ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      ServiceName: image-app-service
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      DesiredCount: 1
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
          SecurityGroups: [!Ref ECSSecurityGroup]
      LoadBalancers:
        - ContainerName: image-app
          ContainerPort: 8082
          TargetGroupArn: !Ref TargetGroup
      TaskDefinition: !Ref TaskDefinition

# Target Auto Scaling
  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - ECSCluster
      - ECSService
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      ResourceId: service/image-app-cluster/image-app-service
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

# Auto Scaling Policy
  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: cpu-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

Outputs:
  LoadBalancerDNS:
    Description: ALB DNS to access app
    Value: !GetAtt LoadBalancer.DNSName

  S3BucketName:
    Description: S3 bucket for image storage
    Value: !Ref ImageAppS3Bucket

  ClusterName:
    Description: Name of the ECS Cluster
    Value: image-app-cluster
    Export:
      Name: ClusterName

  ServiceName:
    Description: ECS Service Name
    Value: image-app-service
    Export:
      Name: ServiceName

  TargetGroup1Name:
    Description: Name of the first target group
    Value: !Ref TargetGroup
    Export:
      Name: TargetGroup1Name

  TargetGroup2Name:
    Description: Name of the second target group
    Value: !Ref TargetGroup2
    Export:
      Name: TargetGroup2Name

  ListenerArn:
    Description: ARN of the Load Balancer Listener
    Value: !Ref Listener
    Export:
      Name: ListenerArn